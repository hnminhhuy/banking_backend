networks:
  app-network:
    driver: bridge

services:
  main:
    image: nhbank/main:18-alpine
    build:
      context: .
    command: >
      /bin/sh -c "npm install &&
                  npm run build &&
                  npm run migration:run &&
                  npm run start:dev"
    restart: on-failure
    volumes:
      - ./:/var/www
    environment:
      - TZ=Asia/Ho_Chi_Minh
    env_file:
      - .env.main-bank
    ports:
      - '${MAIN_BANK_PORT}:80'
    depends_on:
      - postgres
      - another-main
    networks:
      - app-network

  frontend:
    image: frontend:22-alpine
    container_name: frontend
    build:
      context: ../banking_frontend
      dockerfile: Dockerfile
    command: >
      sh -c "npm install &&
             npm run dev"
    working_dir: /frontend
    volumes:
      - ../banking_frontend:/frontend
    environment:
      - TZ=Asia/Ho_Chi_Minh
    ports:
      - '${FRONTEND_PORT}:5173'
    env_file:
      - ../banking_frontend/.env
    restart: on-failure
    depends_on:
      - main
    networks:
      - app-network

  another-main:
    image: another-bank/main:18-alpine
    build:
      context: .
    command: >
      /bin/sh -c "npm install &&
                  npm run build &&
                  npm run migration:run &&
                  npm run start:dev"
    restart: on-failure
    env_file:
      - .env.another-bank
    ports:
      - '${ANOTHER_BANK_PORT}:80'
    volumes:
      - ./:/var/www
    environment:
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - postgres
    networks:
      - app-network

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: on-failure
    environment:
      POSTGRES_USER: ${PG_USERNAME}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${PG_MULTIPLE_DATABASE}
    ports:
      - '${PG_PORT}:5432'
    volumes:
      - ./multi_pg_databases:/docker-entrypoint-initdb.d
      - banking_postgres:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis
    restart: on-failure
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - app-network

volumes:
  banking_postgres:
  redis_data:
